{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","updateList","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","scrollStyle","backgroundColor","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","console","log","key","speed","horizontal","verticalScrollbarStyle","smoothScrolling","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2edab5e8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.updateList = this.updateList.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n\r\n  handleRemove() {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n  toggleForm() {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n  updateList(evt) {\r\n    evt.preventDefault();\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleToggle(evt) {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"FormTodoEdit\">\r\n          <form className=\"Todo-edit-form\" onSubmit={this.updateList}>\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.task}\r\n              name=\"task\"\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>\r\n              <i className=\"fas fa-check-square\"></i>\r\n            </button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className=\"FormTodo\">\r\n          <li\r\n            className={this.props.completed ? \"TodoTask completed\" : \"TodoTask\"}\r\n            onClick={this.handleToggle}\r\n          >\r\n            {this.props.task}\r\n          </li>\r\n          <div className=\"Todo-Buttons\">\r\n            <button onClick={this.toggleForm}>\r\n              <i className=\"fas fa-pen-square\"></i>\r\n            </button>\r\n            <button onClick={this.handleRemove}>\r\n              <i className=\"fas fa-trash-alt\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n}\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport uuid from 'uuid/v4';\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleSubmit(evt) {\r\n      evt.preventDefault();\r\n      this.props.createTodo({...this.state, id:uuid(), completed: false });\r\n      this.setState({task: \"\"});\r\n  }\r\n  render() {\r\n    return (\r\n      <form  className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"task\"></label>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"pizza, juice, ect...\"\r\n          id=\"task\"\r\n          name=\"task\"\r\n          value={this.state.task}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button><i className=\"fas fa-cart-plus\"></i></button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport \"./TodoList.css\";\r\nimport ScrollArea from \"react-scrollbar\";\r\n\r\nconst scrollStyle = {\r\n  backgroundColor: \"rgba(0, 0, 0, 0.445)\",\r\n  \r\n\r\n}\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { todos: [] };\r\n\r\n    this.create = this.create.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.toggleCompletion = this.toggleCompletion.bind(this);\r\n  }\r\n\r\n  create(newTodo) {\r\n\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    });\r\n  }\r\n  remove(id) {\r\n    this.setState({\r\n      todos: this.state.todos.filter(t => t.id !== id)\r\n    });\r\n  }\r\n  update(id, updatedTask) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updatedTask };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  toggleCompletion(id) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  render() {\r\n    console.log(this.state.todos);\r\n    const todos = this.state.todos.map(todo => {\r\n      return (\r\n        <Todo\r\n          key={todo.id}\r\n          id={todo.id}\r\n          task={todo.task}\r\n          completed={todo.completed}\r\n          removeTodo={this.remove}\r\n          updateTodo={this.update}\r\n          toggleTodo={this.toggleCompletion}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"TodoGrocery\">\r\n        <div className=\"noScroll\">\r\n          <h1>\r\n            Grocery List <span>A modern Grocery List</span>\r\n          </h1>\r\n        </div>\r\n        <div className=\"noScrollAdd\">\r\n          <NewTodoForm createTodo={this.create} />\r\n        </div>\r\n        <ScrollArea\r\n          speed={.8}\r\n          className=\"scroll\"\r\n          horizontal={false}\r\n          verticalScrollbarStyle={scrollStyle}\r\n          smoothScrolling={true}\r\n        >\r\n          <ul>{todos}</ul>\r\n        </ScrollArea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TodoList;\r\n","import React from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\n\n\nfunction App() {\n  return (\n <div className=\"BgFullImage\" id=\"GroceryList\">\n     <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n// how to access local data in browser and save cookies to keep list once page is refreshed?????","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}